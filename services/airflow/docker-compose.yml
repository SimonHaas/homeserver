---
version: '3.8'

x-airflow-common:
  &airflow-common
  image: apache/airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY:
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: true
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: true
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: true
    AIRFLOW__CORE__LOAD_EXAMPLES:
  volumes:
    - airflow:/opt/airflow
    - ./data/airflow/dags:/opt/airflow/dags
    - ./airflow.cfg:/opt/airflow/airflow.cfg
  user: 1000:0
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
      POSTGRES_DB: airflow
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow:
    <<: *airflow-common
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    labels:
      my.zone: zone1
      traefik.enable: true
      traefik.http.routers.airflow.rule: Host(`${SUB_DOMAIN}.${SERVER_DOMAIN}`)
      traefik.http.routers.airflow.entrypoints: websecure
      traefik.http.services.airflow.loadbalancer.server.port: ${SERVICE_PORT}
      homepage.group: ${HOMEPAGE_GROUP}
      homepage.name: ${HOMEPAGE_NAME}
      homepage.icon: ${HOMEPAGE_ICON}
      homepage.href: https://${SUB_DOMAIN}.${SERVER_DOMAIN}
      homepage.description: ${HOMEPAGE_DESCRIPTION}
      
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME:
      _AIRFLOW_WWW_USER_PASSWORD:
    user: 0:0

networks:
  default:
    name: zone1
    external: true

volumes:
  airflow:
