version: "3.6"
services:
  vpn:
    # TEST: docker exec -it vpn curl ifconfig.me
    image: ghcr.io/bubuntux/nordlynx
    container_name: vpn
    cap_add:
      - NET_ADMIN
    environment:
      DNS: 1.1.1.1,8.8.8.8
      TZ: ${TZ}
      PRIVATE_KEY: ${PRIVATE_KEY}
      NET_LOCAL: ${NET_LOCAL}
      QUERY: filters\[country_id\]=${COUNTRY_ID}&filters\[servers_groups\]\[identifier\]=${SERVER_TYPE}
    ports:
      - 8191:8191 # flaresolverr
      - 51413:51413 # transmission
      - 51413:51413/udp # transmission
      - 9091:9091 # transmission web-ui
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik
    labels:
      my.zone: zone1
      traefik.enable: true
      traefik.passHostHeader: true

      traefik.http.routers.qbittorrent.rule: Host(`qbittorrent.${SERVER_DOMAIN}`) # admin/adminadmin
      traefik.http.routers.qbittorrent.entrypoints: websecure
      traefik.http.routers.qbittorrent.service: qbittorrent
      traefik.http.services.qbittorrent.loadbalancer.server.port: 8080

      traefik.http.routers.transmission.rule: Host(`transmission.${SERVER_DOMAIN}`)
      traefik.http.routers.transmission.entrypoints: websecure
      traefik.http.routers.transmission.service: transmission
      traefik.http.services.transmission.loadbalancer.server.port: 9091

      traefik.http.routers.lidarr.rule: Host(`lidarr.${SERVER_DOMAIN}`)
      traefik.http.routers.lidarr.entrypoints: websecure
      traefik.http.routers.lidarr.service: lidarr
      traefik.http.services.lidarr.loadbalancer.server.port: 8686

      traefik.http.routers.sonarr.rule: Host(`sonarr.${SERVER_DOMAIN}`)
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.routers.sonarr.service: sonarr
      traefik.http.services.sonarr.loadbalancer.server.port: 8989

      traefik.http.routers.radarr.rule: Host(`radarr.${SERVER_DOMAIN}`)
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.routers.radarr.service: radarr
      traefik.http.services.radarr.loadbalancer.server.port: 7878

      traefik.http.routers.jackett.rule: Host(`jackett.${SERVER_DOMAIN}`)
      traefik.http.routers.jackett.entrypoints: websecure
      traefik.http.routers.jackett.service: jackett
      traefik.http.services.jackett.loadbalancer.server.port: 9117

      traefik.http.routers.readarr.rule: Host(`readarr.${SERVER_DOMAIN}`)
      traefik.http.routers.readarr.entrypoints: websecure
      traefik.http.routers.readarr.service: readarr
      traefik.http.services.readarr.loadbalancer.server.port: 8787

      traefik.http.routers.prowlarr.rule: Host(`prowlarr.${SERVER_DOMAIN}`)
      traefik.http.routers.prowlarr.entrypoints: websecure
      traefik.http.routers.prowlarr.service: prowlarr
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696

      # traefik.http.routers.overseerr.rule: Host(`overseerr.${SERVER_DOMAIN}`)
      # traefik.http.routers.overseerr.entrypoints: websecure
      # traefik.http.routers.overseerr.service: overseerr
      # traefik.http.services.overseerr.loadbalancer.server.port: 5055
   
      traefik.http.routers.jellyseerr.rule: Host(`jellyseerr.${SERVER_DOMAIN}`)
      traefik.http.routers.jellyseerr.entrypoints: websecure
      traefik.http.routers.jellyseerr.service: jellyseerr
      traefik.http.services.jellyseerr.loadbalancer.server.port: 5055

      traefik.http.routers.bevy.rule: Host(`bevy.${SERVER_DOMAIN}`)
      traefik.http.routers.bevy.entrypoints: websecure
      traefik.http.routers.bevy.service: bevy
      traefik.http.services.bevy.loadbalancer.server.port: 8080

      traefik.http.routers.bazarr.rule: Host(`bazarr.${SERVER_DOMAIN}`)
      traefik.http.routers.bazarr.entrypoints: websecure
      traefik.http.routers.bazarr.service: bazarr
      traefik.http.services.bazarr.loadbalancer.server.port: 6767

      traefik.http.routers.whisparr.rule: Host(`whisparr.${SERVER_DOMAIN}`)
      traefik.http.routers.whisparr.entrypoints: websecure
      traefik.http.routers.whisparr.service: whisparr
      traefik.http.services.whisparr.loadbalancer.server.port: 6969

      traefik.http.routers.flood.rule: Host(`flood.${SERVER_DOMAIN}`)
      traefik.http.routers.flood.entrypoints: websecure
      traefik.http.routers.flood.service: flood
      traefik.http.services.flood.loadbalancer.server.port: 3001

      traefik.http.routers.mylar.rule: Host(`mylar.${SERVER_DOMAIN}`)
      traefik.http.routers.mylar.entrypoints: websecure
      traefik.http.routers.mylar.service: mylar
      traefik.http.services.mylar.loadbalancer.server.port: 8090

      traefik.http.routers.lazylibrarian.rule: Host(`lazylibrarian.${SERVER_DOMAIN}`)
      traefik.http.routers.lazylibrarian.entrypoints: websecure
      traefik.http.routers.lazylibrarian.service: lazylibrarian
      traefik.http.services.lazylibrarian.loadbalancer.server.port: 5299

      traefik.http.routers.nzbget.rule: Host(`nzbget.${SERVER_DOMAIN}`)
      traefik.http.routers.nzbget.entrypoints: websecure
      traefik.http.routers.nzbget.service: nzbget
      traefik.http.services.nzbget.loadbalancer.server.port: 6789

  # qbittorrent:
  #   image: ghcr.io/linuxserver/qbittorrent
  #   container_name: qbittorrent
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=${TZ}
  #     - WEBUI_PORT=8080 # admin/adminadmin
  #   volumes:
  #     - ./config/qbittorrent:/config
  #     - ./data/qbittorrent:/downloads
  #   restart: unless-stopped
  #   network_mode: service:vpn
  #   depends_on:
  #     - vpn
  #   security_opt:
  #     - no-new-privileges:true

  transmission:
    container_name: transmission
    image: lscr.io/linuxserver/transmission:latest
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK_SET=022
      - TZ=${TZ}
    volumes:
      - ./config/transmission:/config
      - ./data/transmission:/downloads
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
    labels:
      homepage.group: Arr
      homepage.name: Transmission
      homepage.icon: transmission
      homepage.href: https://${SUB_DOMAIN_TRANSMISSION}.${SERVER_DOMAIN}
      homepage.description: Torrent downloader
      homepage.widget.type: transmission
      homepage.widget.url: https://${SUB_DOMAIN_TRANSMISSION}.${SERVER_DOMAIN}

  # flood: # alternative torrent-downloader UI
  #   container_name: flood
  #   # hostname: flood
  #   image: jesec/flood
  #   user: 1000:1000
  #   restart: unless-stopped
  #   command: --port 3001 --allowedpath /data
  #   environment:
  #     HOME: /config
  #   volumes:
  #     - ./config/flood:/config # has to exist befor first start
  #     - ./data:/data
  #   network_mode: service:vpn
  #   depends_on:
  #     - vpn

  lazylibrarian: # books
    image: lscr.io/linuxserver/lazylibrarian:latest
    container_name: lazylibrarian
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg #optional
    volumes:
      - ./config/lazylibrarian:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
    labels:
      homepage.group: Arr
      homepage.name: Lazylibrarian
      homepage.icon: lazylibrarian
      homepage.href: https://lazylibrarian.${SERVER_DOMAIN}
      homepage.description: Books

  mylar3: # comics
    image: lscr.io/linuxserver/mylar3:latest
    container_name: mylar3
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./config/mylar:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
    labels:
      homepage.group: Arr
      homepage.name: Mylar
      homepage.icon: mylar
      homepage.href: https://mylar.${SERVER_DOMAIN}
      homepage.description: Comics

  lidarr: # music
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ./config/lidarr:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
    security_opt:
      - no-new-privileges:true
    labels:
      homepage.group: Arr
      homepage.name: Lidarr
      homepage.icon: lidarr
      homepage.href: https://lidarr.${SERVER_DOMAIN}
      homepage.description: Music

  radarr: # movies
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ./config/radarr:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
    security_opt:
      - no-new-privileges:true
    labels:
      homepage.group: Arr
      homepage.name: Radarr
      homepage.icon: radarr
      homepage.href: https://radarr.${SERVER_DOMAIN}
      homepage.description: Movies

  sonarr: # series
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ./config/sonarr:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
    security_opt:
      - no-new-privileges:true
    labels:
      homepage.group: Arr
      homepage.name: Sonarr
      homepage.icon: sonarr
      homepage.href: https://${SUB_DOMAIN_SONARR}.${SERVER_DOMAIN}
      homepage.description: Series
      homepage.widget.type: sonarr
      homepage.widget.url: https://${SUB_DOMAIN_SONARR}.${SERVER_DOMAIN}
      homepage.widget.key: ${API_KEY_SONARR}

  # TODO https://youtu.be/5rtGBwBuzQE?t=827
  jackett: # indexer (API Support for your favorite torrent trackers) 
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - AUTO_UPDATE=true
    volumes:
      - ./config/jackett:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
    security_opt:
      - no-new-privileges:true
    labels:
      homepage.group: Arr
      homepage.name: Jackett
      homepage.icon: jackett
      homepage.href: https://jackett.${SERVER_DOMAIN}
      homepage.description: Indexer

  flaresolverr: # Proxy server to bypass Cloudflare protection 
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
    security_opt:
      - no-new-privileges:true
# curl -L -X POST 'http://192.168.1.2:8191/v1' -H 'Content-Type: application/json' --data-raw '{"cmd": "request.get","url":"http://www.google.com/","maxTimeout": 60000}'

  readarr: # books
    container_name: readarr
    image: lscr.io/linuxserver/readarr:develop
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK_SET=022
      - TZ=${TZ}
    volumes:
      - ./config/readarr:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
    labels:
      homepage.group: Arr
      homepage.name: Readarr
      homepage.icon: readarr
      homepage.href: https://readarr.${SERVER_DOMAIN}
      homepage.description: Books

  prowlarr: # indexer
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:develop
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK_SET=022
      - TZ=Europe/Stockholm
    volumes:
      - ./config/prowlarr:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
    labels:
      homepage.group: Arr
      homepage.name: Prowlarr
      homepage.icon: prowlarr
      homepage.href: https://prowlarr.${SERVER_DOMAIN}
      homepage.description: Indexer

  bazarr: # subtitles
    container_name: bazarr
    image: cr.hotio.dev/hotio/bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ./config/bazarr:/config
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
    labels:
      homepage.group: Arr
      homepage.name: Bazarr
      homepage.icon: bazarr
      homepage.href: https://bazarr.${SERVER_DOMAIN}
      homepage.description: Subtitles
  
  whisparr: # porn
    container_name: whisparr
    image: cr.hotio.dev/hotio/whisparr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ./config/whisparr:/config
      - ./data:/data
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
    labels:
      homepage.group: Arr
      homepage.name: Whisparr
      homepage.icon: whisparr
      homepage.href: https://whisparr.${SERVER_DOMAIN}
      homepage.description: Porn

  # bevy: # torrent movie streaming
  #   container_name: bevy
  #   image: zolland/bevy:latest
  #   user: 1000:1000
  #   restart: unless-stopped
  #   environment:
  #     - CONFIG_FILE=/etc/bevy/config.toml
  #   volumes:
  #     - ./config/bevy/config.toml:/etc/bevy/config.toml
  #     - ./data/bevy/downloads:/downloads
  #   network_mode: service:vpn
  #   depends_on:
  #     - vpn
  #     - transmission
  #   labels:
  #     homepage.group: Arr
  #     homepage.name: Bevy
  #     homepage.icon: bevy
  #     homepage.href: https://bevy.${SERVER_DOMAIN}
  #     homepage.description: Torrent movie streaming

  nzbget:
    container_name: nzbget
    image: cr.hotio.dev/hotio/nzbget
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ./config/nzbget:/config
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
    labels:
      homepage.group: Arr
      homepage.name: Nzbget
      homepage.icon: nzbget
      homepage.href: https://nzbget.${SERVER_DOMAIN}
      homepage.description: usenet downloader

  jellyseerr: # media discovery
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
    volumes:
      - ./config/jellyseerr:/app/config
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
      - radarr
      - sonarr
    labels:
      homepage.group: Arr
      homepage.name: Jellyseerr
      homepage.icon: jellyseerr
      homepage.href: https://jellyseerr.${SERVER_DOMAIN}
      homepage.description: Media discovery

  # overseerr:
  #   image: lscr.io/linuxserver/overseerr:latest
  #   container_name: overseerr
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=${TZ}
  #   volumes:
  #     - ./config/overseer:/config
  #   restart: unless-stopped
  #   network_mode: service:vpn
  #   depends_on:
  #     - vpn
  #     - transmission
  #     - radarr
  #     - sonarr
networks:
  traefik:
    name: zone1
